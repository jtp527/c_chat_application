import socket
import threading
import tkinter as tk
from tkinter import simpledialog, scrolledtext
from datetime import datetime

class ChatClient:
    def __init__(self, master):
        self.master = master
        self.master.title("Python GUI Chat Client")

        # Ask for username
        self.username = simpledialog.askstring("Username", "Enter your username:", parent=self.master)
        if not self.username:
            self.master.destroy()
            return

        # Display area
        self.chat_area = scrolledtext.ScrolledText(master, wrap=tk.WORD)
        self.chat_area.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
        self.chat_area.config(state='disabled')

        # Input box
        self.input_box = tk.Entry(master)
        self.input_box.pack(padx=10, pady=(0, 10), fill=tk.X)
        self.input_box.bind("<Return>", self.send_message)

        # Connect to server
        self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            self.client_socket.connect(("127.0.0.1", 12345))
            self.client_socket.send(self.username.encode())  # Send username first
        except ConnectionRefusedError:
            self.show_message("Unable to connect to server.")
            return

        # Start receiving messages
        self.running = True
        threading.Thread(target=self.receive_messages, daemon=True).start()

    def show_message(self, message):
        self.chat_area.config(state='normal')
        self.chat_area.insert(tk.END, message + "\n")
        self.chat_area.config(state='disabled')
        self.chat_area.see(tk.END)

    def send_message(self, event=None):
        message = self.input_box.get()
        if message:
            timestamp = datetime.now().strftime('%H:%M:%S')
            formatted = f"[{timestamp}] You: {message}"
            self.show_message(formatted)
            try:
                self.client_socket.send(message.encode())
                self.input_box.delete(0, tk.END)
            except:
                self.show_message("Failed to send message.")
                self.running = False

    def receive_messages(self):
        while self.running:
            try:
                data = self.client_socket.recv(1024)
                if not data:
                    self.show_message("Server disconnected.")
                    break
                message = data.decode()
                timestamp = datetime.now().strftime('%H:%M:%S')
                formatted = f"[{timestamp}] {message}"
                self.show_message(formatted)
            except:
                break
        self.client_socket.close()

    def on_close(self):
        self.running = False
        self.client_socket.close()
        self.master.destroy()

# Run it
root = tk.Tk()
client = ChatClient(root)
root.protocol("WM_DELETE_WINDOW", client.on_close)
root.mainloop()
